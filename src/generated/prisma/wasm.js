
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  password: 'password',
  role: 'role',
  walletAddress: 'walletAddress',
  isActive: 'isActive',
  isWalletVerified: 'isWalletVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MarketerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  registrationDate: 'registrationDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmployerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  marketerId: 'marketerId',
  companyName: 'companyName',
  registrationDate: 'registrationDate',
  isVerified: 'isVerified',
  verificationDate: 'verificationDate',
  verifiedBy: 'verifiedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmployeeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  employerId: 'employerId',
  kycStage: 'kycStage',
  kycStageLevel1Completed: 'kycStageLevel1Completed',
  kycStageLevel2Completed: 'kycStageLevel2Completed',
  kycStageLevel3Completed: 'kycStageLevel3Completed',
  kycStatus: 'kycStatus',
  kycSubmittedAt: 'kycSubmittedAt',
  kycReviewedAt: 'kycReviewedAt',
  kycReviewerId: 'kycReviewerId',
  kycNotes: 'kycNotes',
  salary: 'salary',
  registrationDate: 'registrationDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  nin: 'nin',
  ninVerified: 'ninVerified',
  bvn: 'bvn',
  bvnVerified: 'bvnVerified',
  termsAccepted: 'termsAccepted',
  termsAcceptedAt: 'termsAcceptedAt'
};

exports.Prisma.AdvanceScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  amount: 'amount',
  repaymentAmount: 'repaymentAmount',
  requestDate: 'requestDate',
  approvalDate: 'approvalDate',
  paymentDate: 'paymentDate',
  dueDate: 'dueDate',
  status: 'status',
  transactionHash: 'transactionHash',
  repaymentTransactionHash: 'repaymentTransactionHash',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LiquidityPoolScalarFieldEnum = {
  id: 'id',
  employerId: 'employerId',
  amount: 'amount',
  transactionType: 'transactionType',
  transactionHash: 'transactionHash',
  timestamp: 'timestamp',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvitationScalarFieldEnum = {
  id: 'id',
  targetEmail: 'targetEmail',
  senderUserId: 'senderUserId',
  recipientUserId: 'recipientUserId',
  expiresAt: 'expiresAt',
  status: 'status',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DemoRequestScalarFieldEnum = {
  id: 'id',
  companyName: 'companyName',
  contactName: 'contactName',
  email: 'email',
  phone: 'phone',
  companySize: 'companySize',
  message: 'message',
  status: 'status',
  scheduledDate: 'scheduledDate',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.EnumUsersRole = exports.$Enums.EnumUsersRole = {
  ADMIN: 'ADMIN',
  EMPLOYER: 'EMPLOYER',
  EMPLOYEE: 'EMPLOYEE',
  WEB3_USER: 'WEB3_USER',
  REGULAR_USER: 'REGULAR_USER',
  MARKETER: 'MARKETER'
};

exports.EnumEmployeesKycStage = exports.$Enums.EnumEmployeesKycStage = {
  none: 'none',
  level_1: 'level_1',
  level_2: 'level_2',
  level_3: 'level_3'
};

exports.EnumEmployeesKycStatus = exports.$Enums.EnumEmployeesKycStatus = {
  pending: 'pending',
  submitted: 'submitted',
  in_review: 'in_review',
  approved: 'approved',
  rejected: 'rejected',
  needs_info: 'needs_info',
  expired: 'expired'
};

exports.EnumAdvancesStatus = exports.$Enums.EnumAdvancesStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  PAID: 'PAID',
  REPAID: 'REPAID',
  DEFAULTED: 'DEFAULTED'
};

exports.EnumLiquidityPoolTransactionType = exports.$Enums.EnumLiquidityPoolTransactionType = {
  CONTRIBUTION: 'CONTRIBUTION',
  WITHDRAWAL: 'WITHDRAWAL',
  ADVANCE_FUNDING: 'ADVANCE_FUNDING',
  REPAYMENT: 'REPAYMENT'
};

exports.EnumInvitationsStatus = exports.$Enums.EnumInvitationsStatus = {
  pending: 'pending',
  accepted: 'accepted',
  rejected: 'rejected',
  expired: 'expired'
};

exports.EnumInvitationsRole = exports.$Enums.EnumInvitationsRole = {
  EMPLOYER: 'EMPLOYER',
  EMPLOYEE: 'EMPLOYEE'
};

exports.EnumDemoRequestsStatus = exports.$Enums.EnumDemoRequestsStatus = {
  PENDING: 'PENDING',
  CONTACTED: 'CONTACTED',
  SCHEDULED: 'SCHEDULED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Marketer: 'Marketer',
  Employer: 'Employer',
  Employee: 'Employee',
  Advance: 'Advance',
  LiquidityPool: 'LiquidityPool',
  Invitation: 'Invitation',
  DemoRequest: 'DemoRequest'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
